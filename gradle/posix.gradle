apply from: rootProject.file("gradle/ide.gradle")

kotlin {
    targets {
        if (project.ext.ideaActive) {
            fromPreset(project.ext.ideaPreset, 'posix')
        } else {
            fromPreset(presets.linuxX64, 'linuxX64')
            if (project.name != 'ktor-client-curl') {
                fromPreset(presets.iosArm64, 'iosArm64')
                fromPreset(presets.iosArm32, 'iosArm32')
                fromPreset(presets.iosX64, 'iosX64')
            }
            fromPreset(presets.macosX64, 'macosX64')
            fromPreset(presets.mingwX64, 'mingwX64')
        }


    }
    sourceSets {
        posixMain.dependencies {
            implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
            implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-native', version: kotlinx_io_version
            implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-native', version: kotlinx_io_version

            implementation "org.jetbrains.kotlinx:atomicfu:$atomic_fu_version"
        }

        posixTest { dependsOn posixMain}
        posixMain { dependsOn commonMain }

        if (!project.ext.ideaActive) {
            configure([iosArm32Main, iosArm64Main, iosX64Main, macosX64Main, linuxX64Main, mingwX64Main]) {
                dependsOn posixMain
            }

            configure([iosArm32Test, iosArm64Test, iosX64Test, macosX64Test, linuxX64Test, mingwX64Test]) {
                dependsOn posixTest
            }

            iosArm32Test.dependsOn iosArm32Main
            iosArm64Test.dependsOn iosArm64Main
            iosX64Test.dependsOn iosX64Main
            linuxX64Test.dependsOn linuxX64Main
            macosX64Test.dependsOn macosX64Main
            iosX64Test.dependsOn iosX64Main
            mingwX64Test.dependsOn mingwX64Main
        }
    }
}

project.ext.set("hasNative", true)
